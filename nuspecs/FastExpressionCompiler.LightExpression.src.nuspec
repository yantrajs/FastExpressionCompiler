<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
    <metadata minClientVersion="3.3.0">
        <id>FastExpressionCompiler.LightExpression.src</id>
        <version>3.0.0-preview-05</version>
        <authors>Maksim Volkau</authors>
        <copyright>Copyright Â© 2013-2020 Maksim Volkau</copyright>
        <projectUrl>https://github.com/dadhi/FastExpressionCompiler</projectUrl>
        <license type="expression">MIT</license>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <icon>logo.png</icon>
        <description>FastExpressionCompiler is 10-40x times faster than Expression.Compile()</description>
        <tags>Performance;Expression;ExpressionTree;Compile;DynamicMethod;IL;ILEmit;DryIoc;ExpressionToCodeLib</tags>
        <releaseNotes><![CDATA[

## v3.0.0 - Major feature release

The version contains a lot of fixes and improvements and hopefully as-little-as-possible breaking changes.

### **FastExpressionCompiler** and **FastExpressionCompiler.LightExpression**

- Performance and memory consumption is improved, especially for the expressions with the closure and for expressions with the nested lambdas.
- Filled the gaps in the expressions support.
- Many fixes in the IL emit.
- Adds `ToCSharpString()` to output the compile-able C# code described by the expression (tries hard).
- Adds `ToExpressionString()` to output the valid expression construction syntax, so given an expression object you'll get e.g. `Lambda(New(...))`.
- Adds optional `enum CompilerFlags { Default, NoInvocationLambdaInlining, EnableDelegateDebugInfo}` parameter for the compilation 
- `EnableDelegateDebugInfo` adds the diagnostic info into the compiled delegate including its source Expression and C# code. Can be used as following: 
```cs
    var f = e.CompileFast(true, CompilerFlags.EnableDelegateDebugInfo);
    var di = f.Target as IDelegateDebugInfo;
    Assert.IsNotNull(di.Expression);
    Assert.IsNotNull(di.ExpressionString);
    Assert.IsNotNull(di.CSharpString);
```

### **FastExpressionCompiler.LightExpression**

- Now includes the `ExpressionVisitor`.
- Improves the compatibility (the drop-in replacement) between `FastExpressionCompiler.LightExpression.Expression` and `System.Linq.Expression`.
- Decreasing the memory consumed by the created expressions, plus implementing the `IArgumentProvider` and `IParameterProvider` for some of the expressions.


### The full list of fixes

[Milestone v3.0.0](https://github.com/dadhi/FastExpressionCompiler/milestone/19)

        ]]></releaseNotes>
        <contentFiles>
            <files include="cs/**/*.*" buildAction="Compile" />
        </contentFiles>
        <dependencies>
            <group targetFramework="net45">
                <dependency id="System.ValueTuple" version="4.5.0" />
            </group>
            <group targetFramework="netstandard2.0">
                <dependency id="System.Dynamic.Runtime" version="4.3.0" />
                <dependency id="System.Reflection.Emit.Lightweight" version="4.7.0" />
            </group>
        </dependencies>
    </metadata>
    <files>
        <file src="..\LICENSE" />
        <file src="..\logo.png" />
        <file src="..\FastExpressionCompiler.snk" />

        <file src="_._" target="lib\net45\" />
        <file src="_._" target="lib\netstandard2.0\" />

        <file src="..\src\FastExpressionCompiler\FastExpressionCompiler.cs"            target="contentFiles\cs\net45\FastExpressionCompiler.LightExpression" />
        <file src="..\src\FastExpressionCompiler.LightExpression\Expression.cs"        target="contentFiles\cs\net45\FastExpressionCompiler.LightExpression" />
        <file src="..\src\FastExpressionCompiler.LightExpression\ExpressionVisitor.cs" target="contentFiles\cs\net45\FastExpressionCompiler.LightExpression" />

        <file src="..\src\FastExpressionCompiler\FastExpressionCompiler.cs"            target="contentFiles\cs\netstandard2.0\FastExpressionCompiler.LightExpression" />
        <file src="..\src\FastExpressionCompiler.LightExpression\Expression.cs"        target="contentFiles\cs\netstandard2.0\FastExpressionCompiler.LightExpression" />
        <file src="..\src\FastExpressionCompiler.LightExpression\ExpressionVisitor.cs" target="contentFiles\cs\netstandard2.0\FastExpressionCompiler.LightExpression" />

    </files>
</package>
