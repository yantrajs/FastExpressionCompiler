<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks>net45;netstandard2.0</TargetFrameworks>

        <VersionPrefix>3.0.0</VersionPrefix>
        <VersionSuffix>preview-05</VersionSuffix>

        <Product>FastExpressionCompiler.LightExpression</Product>

        <PackageId>$(Product)</PackageId>
        <Title>$(Product)</Title>
        <Description>FastExpressionCompiler for LightExpression is 10-40x times faster than Expression.Compile()</Description>
        <PackageTags>Performance;Expression;ExpressionTree;Compile;DynamicMethod;IL;ILEmit;DryIoc;ExpressionToCodeLib</PackageTags>
        <PackageReleaseNotes><![CDATA[

## v3.0.0 - Major feature release

The version contains a lot of fixes and improvements and hopefully as-little-as-possible breaking changes.

### **FastExpressionCompiler** and **FastExpressionCompiler.LightExpression**

- Performance and memory consumption is improved, especially for the expressions with the closure and for expressions with the nested lambdas.
- Filled the gaps in the expressions support.
- Many fixes in the IL emit.
- Adds `ToCSharpString()` to output the compile-able C# code described by the expression (tries hard).
- Adds `ToExpressionString()` to output the valid expression construction syntax, so given an expression object you'll get e.g. `Lambda(New(...))`.
- Adds optional `enum CompilerFlags { Default, NoInvocationLambdaInlining, EnableDelegateDebugInfo}` parameter for the compilation 
- `EnableDelegateDebugInfo` adds the diagnostic info into the compiled delegate including its source Expression and C# code. Can be used as following: 
```cs
    var f = e.CompileFast(true, CompilerFlags.EnableDelegateDebugInfo);
    var di = f.Target as IDelegateDebugInfo;
    Assert.IsNotNull(di.Expression);
    Assert.IsNotNull(di.ExpressionString);
    Assert.IsNotNull(di.CSharpString);
```

### **FastExpressionCompiler.LightExpression**

- Now includes the `ExpressionVisitor`.
- Improves the compatibility (the drop-in replacement) between `FastExpressionCompiler.LightExpression.Expression` and `System.Linq.Expression`.
- Decreasing the memory consumed by the created expressions, plus implementing the `IArgumentProvider` and `IParameterProvider` for some of the expressions.


### The full list of fixes

[Milestone v3.0.0](https://github.com/dadhi/FastExpressionCompiler/milestone/19)

        ]]></PackageReleaseNotes>

            <AssemblyName>$(Product)</AssemblyName>
            <AssemblyTitle>$(Product) $(TargetFramework)</AssemblyTitle>
            <AssemblyVersion>$(VersionPrefix)</AssemblyVersion>

            <DefineConstants>LIGHT_EXPRESSION</DefineConstants>
        </PropertyGroup>

        <ItemGroup>
            <Compile Include="..\FastExpressionCompiler\FastExpressionCompiler.cs"/>
        </ItemGroup>

        <ItemGroup Condition=" '$(TargetFramework)' == 'net45' ">
            <PackageReference Include="System.ValueTuple" Version="4.5.0"/>
        </ItemGroup>

        <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
            <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.7.0"/>
            <PackageReference Include="System.Dynamic.Runtime" Version="4.3.0"/>
        </ItemGroup>
    </Project>
